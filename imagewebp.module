<?php
/**
 * @file
 * Module file for generating webp image.
 */

// Load all Field module hooks for Imagewebp.
require_once backdrop_get_path('module', 'imagewebp') . '/imagewebp.field.inc';

function imagewebp_init() {
  // dsm(filter_input(INPUT_SERVER, 'DOCUMENT_ROOT'), 'filter_input');
}

/**
 * Callback for generate webp image.
 */
function imagewebp_create_webp($file) {
  $uri = $file->uri;
  $url = file_create_url($uri);
  $pathinfo = pathinfo($url, PATHINFO_FILENAME);
  $file_path = realpath(filter_input(INPUT_SERVER, 'DOCUMENT_ROOT') . parse_url($url, PHP_URL_PATH));
  $dirpath = dirname($file_path) . '/' . $pathinfo . '.webp';
  $webp_url = imagewebp_create_from_any($url);
  $imagewebp = imagewebp($webp_url, $dirpath);

  return $imagewebp;
}

/**
 * Returns an image identifier representing a blank image of specified size.
 */
function imagewebp_create_from_any($filepath) {
  // You can use getImageSize()
  $type = exif_imagetype($filepath);
  // 1->gif, 2->jpg, 3->png, 6->bmp.
  $allowed_types = array(1, 2, 3, 6);

  if (!in_array($type, $allowed_types)) {
    return FALSE;
  }

  switch ($type) {
    case 1:
      $im = imagecreatefromgif($filepath);
      break;

    case 2:
      $im = imagecreatefromjpeg($filepath);
      break;

    case 3:
      $im = imagecreatefrompng($filepath);
      imagepalettetotruecolor($im);
      imagealphablending($im, true);
      imagesavealpha($im, true);
      break;

    case 6:
      $im = imagecreatefrombmp($filepath);
      break;
  }
  return $im;
}

function imagewebp_node_view(Node $node, $view_mode, $langcode) {
  if (_imagewebp_webp_browser_support()) {
    $fields = imagewebp_get_field_entity('node', $node->type);
    foreach ($fields as $field) {
      if (isset($node->{$field}['und'][0]['uri'])) {
        $path = $node->{$field}['und'][0]['uri'];
        $uri = preg_replace('"\.(bmp|gif|png|jpg)$"', '.webp', $path);
        if (!file_exists($uri)) {
          $file = (object) $node->{$field}['und'][0];
          imagewebp_create_webp($file);
        }
        if (file_exists($uri)) {
          $node->{$field}['und'][0]['uri'] = $uri;

          $filename = $node->{$field}['und'][0]['filename'];
          $filename = preg_replace('"\.(bmp|gif|png|jpg)$"', '.webp', $filename);
          $node->{$field}['und'][0]['filename'] = $filename;
          $node->{$field}['und'][0]['filemime'] = 'image/webp';
        }
      }
    }
  }
}

/**
 * Implements hook_field_display_alter().
 */
function imagewebp_field_display_alter(&$display, $context) {
  /*
    if (_imagewebp_webp_browser_support() && $display['type'] == 'image') {
    $content = field_info_instances("node", $context['entity']->type);
    $field_name = $context['instance']['field_name'];
    $support = $display['settings']['webp_support'];
    foreach ($content as $field => $field_info) {
      if ($support) {
        if (isset($context['entity']->{$field}['und'][0]['uri'])) {
          $path = $context['entity']->{$field}['und'][0]['uri'];
          $uri = preg_replace('"\.(bmp|gif|png|jpg)$"', '.webp', $path);
          if (file_exists($uri)) {
            $context['entity']->{$field}['und'][0]['uri'] = $uri;
            $filename = $context['entity']->{$field}['und'][0]['filename'];
            $filename = preg_replace('"\.(bmp|gif|png|jpg)$"', '.webp', $filename);
            $context['entity']->{$field}['und'][0]['filename'] = $filename;
            $context['entity']->{$field}['und'][0]['filemime'] = 'image/webp';
          }
        }
      }
    }
  }
  */
}

/**
 * Implements hook_preprocess_field().
 */
function imagewebp_preprocess_field(&$vars) {
  // Provide an extra variable to the field template when the field uses
  // a formatter of type 'image'.
  if ($vars['element']['#formatter'] == 'image') {
    $entity_type = $vars['element']['#entity_type'];
    $field_name  = $vars['element']['#field_name'];
    $bundle = $vars['element']['#bundle'];
    $view_mode = $vars['element']['#view_mode'];

    $formatter_settings = field_formatter_settings_get_instance_display_settings($entity_type, $field_name, $bundle, $view_mode);
    // Make the setting available in the field template.
    $vars['webp_support'] = $formatter_settings['webp_support'];
    if ($vars['element']['#object']->{$field_name}['und'][0]['filemime'] == 'image/webp') {
      $source = $vars['element']['#object']->{$field_name}['und'][0];
      $keys = array('filename', 'uri', 'filemime');
      foreach ($keys as $key) {
        $vars['element']['#items'][0][$key] = $source[$key];
        $vars['element']['0']['#item'][$key] = $source[$key];
        $vars['items'][0]['#item'][$key] = $source[$key];
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function imagewebp_form_field_ui_display_overview_form_alter(&$form, &$form_state) {
  $form['actions']['submit']['#submit'][] = '_imagewebp_custom_submit';
}

/**
 * Implements hook_form_ID_alter().
 * page_node_form
 */
function imagewebp_form_page_node_form_alter(&$form, &$form_state) {
  $form['actions']['submit']['#submit'][] = '_imagewebp_node_submit';
}

/**
 * Callback for hook_form_alter() submit.
 */
function _imagewebp_node_submit($form, &$form_state) {
  $fields = imagewebp_get_field_entity($form['#entity_type'], $form['#bundle']);
  $nodes = node_load_multiple(array(), array('type' => $form['#bundle']));
  $test = array();

  foreach ($fields as $key => $field) {
    foreach ($nodes as $k => $node) {
      $fid = $node->{$field}[LANGUAGE_NONE][0]['fid'];

      if (isset($fid) && $fid != 0) {
        $file = file_load($fid);
        if ($file) {
          $test[] = $fid;
          $response = imagewebp_create_webp($file);
        }
      }
    }
  }
}

/**
 * Helper function to determine if WebP Support is active on this browser.
 *
 * @return bool
 *   TRUE if supported, FALSE if not.
 */
function _imagewebp_webp_browser_support() {
  if ((isset($_SERVER['HTTP_ACCEPT']) === TRUE) && (strstr($_SERVER['HTTP_ACCEPT'], 'image/webp') !== FALSE)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Helper function to determine if this server has WebP Support.
 *
 * @return bool
 *   TRUE if supported, FALSE if not.
 */
function _imagewebp_webp_server_support() {
  // Get information about the native GD image library in PHP.
  $gd_info = array();
  if (function_exists(gd_info())) {
    $gd_info = gd_info();
  }

  // Check GD info and if the necessary function exists.
  if (isset($gd_info['WebP Support']) && $gd_info['WebP Support'] && function_exists('imagewebp')) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Callback for hook_form_alter() submit.
 */
function _imagewebp_custom_submit($form, &$form_state) {
  $fields = imagewebp_get_field_entity($form['#entity_type'], $form['#bundle']);
  $nodes = node_load_multiple(array(), array('type' => $form['#bundle']));
  $test = array();

  foreach ($fields as $key => $value) {
    $formatter_settings = $form_state['formatter_settings'];

    if (isset($formatter_settings[$value]) && $formatter_settings[$value]['webp_support']) {
      foreach ($nodes as $k => $v) {
        $fid = $v->{$value}[LANGUAGE_NONE][0]['fid'];

        if (isset($fid) && $fid != 0) {
          $file = file_load($fid);

          if ($file) {
            $test[] = $fid;
            $response = imagewebp_create_webp($file);
          }
        }
      }
    }
  }
}

/**
 * Returns fields of type image.
 */
function imagewebp_get_field_entity($node, $type) {
  $field_entity = field_info_instances($node, $type);
  $field_image = array();

  foreach ($field_entity as $key => $value) {
    if ($value['widget']['module'] == 'image') {
      $field_image[] = $key;
    }
  }

  return $field_image;
}
